# rules:
# 1: no semicolons
# 2: the rules do not count as lines
# 3: no exec(), eval() or other things that can run code
# 4: no external libraries other than pygame and basic once like math, random and os
import pygame, random
_, score, hiscore, font, pause_button, keys_last_frame, win, clock, bird_x, bird_y, bird_vel, bird_size, pipe_hole_height, pipe_width, pipes, paused, game_over = pygame.init(), 0, 0, pygame.font.Font("freesansbold.ttf", 32), False, None, pygame.display.set_mode((900, 500)), pygame.time.Clock(), 100, 0, 0, 30, 150, 50, None, False, True
while sum([1 if event.type == pygame.QUIT else 0 for event in pygame.event.get()]) < 1:
    _, score_render, hiscore_render, hiscore, pause_button, keys_last_frame, bird_y, bird_vel, pipes, paused, game_over, score = [clock.tick(30), font.render("Score: " + str(score), True, (255, 255, 255)), font.render("HiScore: " + str(hiscore), True, (255, 255, 255)), max(score, hiscore), (pygame.key.get_pressed()[pygame.K_ESCAPE] and not keys_last_frame[pygame.K_ESCAPE]), pygame.key.get_pressed()] + (([bird_y + bird_vel, (bird_vel + 0.5 if not pygame.key.get_pressed()[pygame.K_SPACE] else -10) * 0.98, [{"x": pipe["x"] - 5, "y": pipe["y"]} if pipe["x"] >= -pipe_width else {"x": 1000, "y": random.randint(150, 350)} for pipe in pipes], pause_button, (bird_y < -bird_size or bird_y > 500) or sum([1 if (pipe["x"] - bird_size < bird_x < pipe["x"] + pipe_width) and not (pipe["y"] - pipe_hole_height//2 < bird_y < pipe["y"] + pipe_hole_height//2 - bird_size) else 0 for pipe in pipes]) > 0, score + sum([1 if pipe["x"] + 6 > bird_x > pipe["x"] else 0 for pipe in pipes])] if not game_over else [250, 0, [{"x": 1000, "y": 200}, {"x": 1535, "y": 300}], True, False, 0]) if not paused else [bird_y, bird_vel, pipes, not (pygame.key.get_pressed()[pygame.K_SPACE] or pause_button), game_over, score])
    [pygame.draw.rect(win, rect["color"], rect["rect"], border_radius=rect["border_radius"]) for rect in [{"color": (31, 143, 255), "rect": (0, 0, 900, 500), "border_radius": 0}, {"color": (255, 229, 31), "rect": (bird_x, bird_y, bird_size, bird_size), "border_radius": 5}] + [{"color": (8, 150, 0), "rect": (pipe["x"], pipe["y"] + pipe_hole_height // 2 if bottom else pipe["y"] - 1000 - pipe_hole_height // 2, pipe_width, 1000), "border_radius": 5} for bottom in [True, False] for pipe in pipes]]
    _, _, _ = win.blit(score_render, (0, 0)), win.blit(hiscore_render, (0, 32)), pygame.display.update()